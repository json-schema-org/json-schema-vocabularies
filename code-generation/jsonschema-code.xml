<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3339 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC6901 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6901.xml">
<!ENTITY RFC7159 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7231 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7231.xml">
]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes" ?>
<rfc category="info" docName="draft-kappestein-json-schema-code-00" ipr="trust200902">
    <front>
        <title abbrev="JSON Schema Code">JSON Schema Code: JSON Schema rules to simplify code generation</title>
        <author fullname="Christoph Kappestein" initials="C" surname="Kappestein" role="editor">
            <address>
                <email>christoph.kappestein@gmail.com</email>
            </address>
        </author>
        <date year="2017"/>
        <workgroup>Internet Engineering Task Force</workgroup>
        <keyword>JSON</keyword>
        <keyword>Schema</keyword>
        <keyword>Code Generation</keyword>
        <abstract>
            <t>
                JSON Schema provides many ways to describe a JSON structure. The 
                price of this flexibility is that it is difficult for code generators 
                to understand a JSON Schema. This specification restricts the JSON Schema 
                keywords to a subset with a deterministic behaviour.
            </t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction">
            <t>
                This vocabulary restricts the JSON Schema Validation keywords to 
                a clear subset which removes ambiguities and inherent invalid schemas.
            </t>
            <t>
                If a JSON Schema follows these rules it is easier for processors and
                code generators to consume. This leads to better results and
                maintainability of a schema.
            </t>
            <t>
                This specification should be seen as extension to the JSON Schema
                draft-wright-json-schema-validation-00 specification.
            </t>
        </section>
        <section title="Conventions and Terminology">
            <t>
                <!-- The text in this section has been copied from the official boilerplate,
                and should not be modified.-->

                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
                "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
                interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
            </t>

            <t>
                The terms "JSON", "JSON text", "JSON value", "member", "element", "object", "array",
                "number", "string", "boolean", "true", "false", and "null" in this document are to
                be interpreted as defined in <xref target="RFC7159">RFC 7159</xref>.
            </t>
        </section>
        <section title="Overview">
            <t>
                This document describes the JSON Schema restriction rules and all available 
                validation keywords and their corresponding behaviour. It contains
                also a JSON Schema to validate whether a JSON Schema complies to these
                rules.
            </t>
        </section>
        <section title="Restriction rules">
            <t>
                In the JSON Schema core specification all keywords are optional and
                are applied in context with the actual data. The idea of this specification
                is to build schemas which have a distinct meaning independent of 
                the actual data and which can be used to generate different representations 
                i.e. model classes of a specific programming language. Because of 
                this we must restrict existing keywords and must make specific keywords
                mandatory depending on the context.
            </t>
            <t>
                In this specification every schema is exactly assigned to a specific
                type of schema: Definition, Combination or Reference. The distinction 
                is made based on the used keywords.
            </t>
            <section title="Definition">
                <t>
                    A definition schema is a schema which describes a concrete type. 
                    It must follow the rules:
                </t>
                <t>
                    <list style="symbols">
                        <t>
                            Every schema MUST have a "type" keyword. The type must be one of:
                            "object", "array", "boolean", "number", "integer" or "string"
                        </t>
                        <t>
                            Every schema of type "object" MUST have a "title" keyword. This
                            is required so that code generators can build class names or other
                            identifiers based on this title.
                        </t>
                        <t>
                            Every schema of type "object" is either a struct (MUST have
                            a "properties" keyword) or a map (MUST have a "additionalProperties" 
                            keyword).
                        </t>
                        <t>
                            Every schema of type "array" MUST have an "items" keyword.
                            The items can only contain definition ("object", "boolean", 
                            "number", "string") or reference schemas.
                        </t>
                        <t>
                            It is not possible to mix multiple constraints i.e. a schema
                            of type "string" can only use string specific validation 
                            keywords i.e. "minLength".
                        </t>
                    </list>
                </t>
            </section>
            <section title="Combination">
                <t>
                    A combination schema combines multiple schemas in a specific way. 
                    It must follow the rules:
                </t>
                <t>
                    <list style="symbols">
                        <t>
                            Every schema MUST have one of the following keywords:
                            "allOf", "anyOf" or "oneOf".
                        </t>
                        <t>
                            The value must be an array which can contain only definition 
                            or reference schemas. These schemas MUST be of type "object".
                        </t>
                    </list>
                </t>
            </section>
            <section title="Reference">
                <t>
                    A reference schema makes a reference to another schema. 
                    It must follow the rules:
                </t>
                <t>
                    <list style="symbols">
                        <t>
                            Every schema MUST have the keyword "$ref".
                        </t>
                        <t>
                            A reference schema MUST follow the same rules as a 
                            definition schema. That means i.e. if a reference is used 
                            inside the "allOf" keyword it MUST only reference object
                            types.
                        </t>
                    </list>
                </t>
            </section>
        </section>

        <section title="Not supported keywords">
            <t>
                The following keywords are not supported. Not supported means that 
                they have no special meaning in this specification and code generators
                should ignore those keywords.
            </t>
            <t>
                <list style="symbols">
                    <t>
                        The "patternProperties" keyword is not supported.
                    </t>
                    <t>
                        The "type" keyword MUST be a string. The array notation
                        is not supported.
                    </t>
                    <t>
                        The "null" type is not supported.
                    </t>
                    <t>
                        The "not" keyword is not supported.
                    </t>
                    <t>
                        The "dependencies" keyword is not supported.
                    </t>
                    <t>
                        The "additionalItems" keyword is not supported.
                    </t>
                </list>
            </t>
        </section>
        
        <section title="Validation keywords">
            <t>
                This specification restricts the usage of the validation keywords.
                Which keywords are allowed depends on the schema type.
            </t>
            <t>
                The following chapter lists all available keywords and describes
                the concrete behaviour.
            </t>
            <t>
                If not otherwise noted the behaviour of a keyword is identical
                to the <xref target="json-schema-validation">JSON Schema validation</xref> specification.
            </t>
            <section title="Definition keywords">
                <t>
                    The following keywords can be used to describe a definition schema.
                </t>
                <section title="Common keywords">
                    <t>
                        The following keywords can be used in any definition schema:
                    </t>
                    <t>
                        <list style="symbols">
                            <t>title</t>
                            <t>description</t>
                            <t>type</t>
                        </list>
                    </t>
                    <section title="title">
                        <t>
                            The value of this keyword MUST be a string. Should only
                            contain the characters "A-Z", "a-z" and "_".
                        </t>
                        <t>
                            Should be a distinct word which represents this schema,
                            may be used to generate i.e. class names or other identifiers.
                        </t>
                        <t>
                            Schemas with the same title should represent the same constraints
                            since a processor could merge multiple schemas and thus
                            remove duplicate schemas.
                        </t>
                    </section>
                    <section title="description">
                        <t>
                            The value of this keyword MUST be a string.
                        </t>
                        <t>
                            Contains a general description of this property. Should only
                            contain simple text and no line breaks since the description
                            is may be used in code comments or other character sensitive
                            environments.
                        </t>
                    </section>
                    <section title="type">
                        <t>
                            The value of this keyword MUST be a string.
                        </t>
                        <t>
                            String values MUST be one of the six primitive types
                            ("boolean", "object", "array", "number", or "string"),
                            or "integer" which matches any number with a zero fractional part.
                        </t>
                    </section>
                </section>
                <section title="Object keywords">
                    <t>
                        If a schema has a "type" keyword which is "object" the following validation
                        keywords can be used:
                    </t>
                    <t>
                        <list style="symbols">
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.15">required</eref></t>
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.16">properties</eref></t>
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.18">additionalProperties</eref></t>
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.13">maxProperties</eref></t>
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.14">minProperties</eref></t>
                        </list>
                    </t>
                    <t>
                        An object must be either a struct or map type. A struct object contains
                        a set of fixed properties and a map object contains variable key value
                        entries.
                    </t>
                    <t>
                        Each object type MUST have also a "title" keyword. The title may be used by a
                        generator to determine a class name for a schema.
                    </t>
                    <section title="Struct keywords">
                        <t>
                            A struct is an object which MUST have at least a "type",
                            "title" and "properties" keyword.
                        </t>
                        <figure>
                            <artwork>
                                <![CDATA[
{
    "title": "Person",
    "type": "object",
    "properties": {
        "forname": {
            "type": "string"
        },
        "lastname": {
            "type": "string"
        }
    }
}
]]>
                            </artwork>
                        </figure>
                    </section>
                    <section title="Map keywords">
                        <t>
                            A map is an object which MUST have at least a "type",
                            "title" and "additionalProperties" keyword.
                        </t>
                        <figure>
                            <artwork>
                                <![CDATA[
{
    "title": "Config",
    "type": "object",
    "additionalProperties": {
        "type": "string"
    }
}
]]>
                            </artwork>
                        </figure>
                    </section>
                </section>
                <section title="Array keywords">
                    <t>
                        If a schema has a "type" keyword which is "array" the following validation
                        keywords can be used:
                    </t>
                    <t>
                        <list style="symbols">
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.9">items</eref></t>
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.10">maxItems</eref></t>
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.11">minItems</eref></t>
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.12">uniqueItems</eref></t>
                        </list>
                    </t>
                </section>
                <section title="Scalar keywords">
                    <t>
                        If a schema has a "type" keyword which is either "boolean", "number" or "string" the
                        following validation keywords can be used:
                    </t>
                    <t>
                        <list style="symbols">
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-7">format</eref></t>
                            <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.20">enum</eref></t>
                        </list>
                    </t>
                    <section title="format">
                        <t>
                            In the context of code generation the "format" keyword gives a hint
                            about the concrete data type of a property. While the JSON schema
                            validation specification defines many formats this specification 
                            supports only the formats which are usable in the context of code 
                            generation. I.e. if the format is "date-time" a code generator 
                            could utilize the standard date class of the target programming language.
                            A code generator should consider the following formats:
                        </t>
                        <t>
                            <list style="symbols">
                                <t>int32 (signed 32 bits)</t>
                                <t>int64 (signed 64 bits)</t>
                                <t>float</t>
                                <t>double</t>
                                <t>byte (base64 encoded characters)</t>
                                <t>binary (any sequence of octets)</t>
                                <t>date (as defined by full-date <xref target="RFC3339">RFC 3339</xref>)</t>
                                <t>date-time (as defined by date-time <xref target="RFC3339">RFC 3339</xref>)</t>
                            </list>
                        </t>
                    </section>
                    <section title="Boolean keywords">
                        <t>
                            If a schema has a "type" keyword which is "boolean" no validation keywords
                            are available.
                        </t>
                    </section>
                    <section title="Number keywords">
                        <t>
                            If a schema has a "type" keyword which is either "number" or "integer" the
                            following validation keywords can be used:
                        </t>
                        <t>
                            <list style="symbols">
                                <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.1">multipleOf</eref></t>
                                <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.2">maximum</eref></t>
                                <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.3">exclusiveMaximum</eref></t>
                                <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.4">minimum</eref></t>
                                <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.5">exclusiveMinimum</eref></t>
                            </list>
                        </t>
                    </section>
                    <section title="String keywords">
                        <t>
                            If a schema has a "type" keyword which is "string" the following validation
                            keywords can be used:
                        </t>
                        <t>
                            <list style="symbols">
                                <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.6">maxLength</eref></t>
                                <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.7">minLength</eref></t>
                                <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.8">pattern</eref></t>
                            </list>
                        </t>
                    </section>
                </section>
            </section>
            <section title="Combination keywords">
                <t>
                    The following keywords can be used to describe a combination schema:
                </t>
                <t>
                    <list style="symbols">
                        <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.22">allOf</eref></t>
                        <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.23">anyOf</eref></t>
                        <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.24">oneOf</eref></t>
                    </list>
                </t>
                <section title="allOf">
                    <t>
                        The all of array should be used to express inheritance. The array
                        should list the most generic definition at the first position of
                        the array and the most specific definition at the bottom.
                    </t>
                    <t>
                        Through this code generators could implement inheritance alongside
                        the array.
                    </t>
                    <t>
                        Also it is possible to aggregate all schemas into a single schema. Since the 
                        all of array can only contain schemas of type "object" it is clear that 
                        the result is also always an schema of type "object".
                    </t>
                    <figure>
                        <artwork>
                            <![CDATA[
{
    "allOf": [{
        "$ref": "#/definitions/person"
    }, {
        "title": "teacher",
        "type": "object",
        "properties": {
            "classroom": {
                "type": "string"
            }
        }
    }]
}
]]>
                        </artwork>
                    </figure>
                </section>
            </section>
            <section title="Reference keywords">
                <t>
                    The following keywords can be used to describe a reference schema:
                </t>
                <t>
                    <list style="symbols">
                        <t><eref target="https://tools.ietf.org/html/draft-wright-json-schema-00#section-7">$ref</eref></t>
                    </list>
                </t>
            </section>
        </section>
        <section title="Schema">
            <t>
                The following JSON Schema can be used to validate whether a
                JSON Schema follows these rules.
            </t>
            <figure>
                <artwork>
                    <![CDATA[
{
  "description": "A strict JsonSchema meta schema to simplify code generation",
  "oneOf": [{
    "$ref": "#/definitions/definition"
  }, {
    "$ref": "#/definitions/combination"
  }, {
    "$ref": "#/definitions/reference"
  }],
  "definitions": {
    "common": {
      "description": "Common properties which can be used in any schema",
      "title": "common",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Distinct word which represents this property, may be used to generate i.e. class names or other identifier"
        },
        "description": {
          "type": "string",
          "description": "General description of this property"
        },
        "type": {
          "type": "string",
          "description": "JSON type of the property",
          "enum": ["object", "array", "boolean", "integer", "number", "string"]
        },
        "nullable": {
          "type": "boolean",
          "description": "Whether it is possible to use a null value on this property",
          "default": false
        },
        "deprecated": {
          "type": "boolean",
          "description": "Whether this property is deprecated",
          "default": false
        }
      }
    },
    "commonScalar": {
      "description": "Properties for scalar values",
      "allOf": [{
        "$ref": "#/definitions/common"
      }, {
        "title": "scalar",
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Describes the specific format of this type i.e. date-time or int64"
          },
          "enum": {
            "type": "array",
            "description": "A list of possible enumeration values",
            "items": {
              "oneOf": [{
                "type": "string"
              },{
                "type": "number"
              }]
            },
            "minItems": 1
          }
        }
      }]
    },
    "commonContainer": {
      "description": "Properties for object values",
      "allOf": [{
        "$ref": "#/definitions/common"
      }, {
        "title": "container",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Distinct word which represents this property, may be used to generate i.e. class names or other identifier"
          },
          "type": {
            "type": "string",
            "enum": ["object"]
          },
          "required": { "$ref": "#/definitions/stringArray" }
        },
        "required": ["title", "type"]
      }]
    },
    "object": {
      "description": "An object represents either a struct or map",
      "oneOf": [{
        "$ref": "#/definitions/objectStruct"
      }, {
        "$ref": "#/definitions/objectMap"
      }]
    },
    "objectStruct": {
      "description": "A struct contains a fix set of defined properties",
      "allOf": [{
        "$ref": "#/definitions/commonContainer"
      }, {
        "title": "struct",
        "type": "object",
        "properties": {
          "properties": {
            "type": "object",
            "additionalProperties": { "$ref": "#" }
          }
        },
        "required": ["properties"]
      }]
    },
    "objectMap": {
      "description": "A map contains variable key value entries",
      "allOf": [{
        "$ref": "#/definitions/commonContainer"
      }, {
        "title": "map",
        "type": "object",
        "properties": {
          "additionalProperties": { "$ref": "#" },
          "maxProperties": { "$ref": "#/definitions/positiveInteger" },
          "minProperties": { "$ref": "#/definitions/positiveInteger" }
        },
        "required": ["additionalProperties"]
      }]
    },
    "array": {
      "description": "An array contains an ordered list of variable values",
      "allOf": [{
        "$ref": "#/definitions/common"
      }, {
        "title": "array",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["array"]
          },
          "items": {
            "$ref": "#/definitions/arrayItem"
          },
          "maxItems": { "$ref": "#/definitions/positiveInteger" },
          "minItems": { "$ref": "#/definitions/positiveInteger" },
          "uniqueItems": { 
            "type": "boolean"
          }
        },
        "required": ["type", "items"]
      }]
    },
    "boolean": {
      "description": "Represents a boolean value",
      "allOf": [{
        "$ref": "#/definitions/commonScalar"
      }, {
        "title": "boolean",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["boolean"]
          }
        },
        "required": ["type"]
      }]
    },
    "number": {
      "description": "Represents a number value which contains also integer",
      "allOf": [{
        "$ref": "#/definitions/commonScalar"
      }, {
        "title": "number",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["number", "integer"]
          },
          "multipleOf": {
            "type": "number",
            "minimum": 0,
            "exclusiveMinimum": true
          },
          "maximum": {
            "type": "number"
          },
          "exclusiveMaximum": {
            "type": "boolean",
            "default": false
          },
          "minimum": {
            "type": "number"
          },
          "exclusiveMinimum": {
            "type": "boolean",
            "default": false
          }
        },
        "required": ["type"]
      }]
    },
    "string": {
      "description": "Represents a string value",
      "allOf": [{
        "$ref": "#/definitions/commonScalar"
      }, {
        "title": "string",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["string"]
          },
          "maxLength": { "$ref": "#/definitions/positiveInteger" },
          "minLength": { "$ref": "#/definitions/positiveInteger" },
          "pattern": {
            "type": "string",
            "format": "regex"
          }
        },
        "required": ["type"]
      }]
    },
    "allOf": {
      "description": "Combination keyword to validate all containing schemas",
      "allOf": [{
        "$ref": "#/definitions/common"
      }, {
        "title": "allOf",
        "type": "object",
        "properties": {
          "allOf": { "$ref": "#/definitions/of" }
        },
        "required": ["allOf"]
      }]
    },
    "anyOf": {
      "description": "Combination keyword to validate any containing schemas",
      "allOf": [{
        "$ref": "#/definitions/common"
      }, {
        "title": "anyOf",
        "type": "object",
        "properties": {
          "anyOf": { "$ref": "#/definitions/of" }
        },
        "required": ["anyOf"]
      }]
    },
    "oneOf": {
      "description": "Combination keyword to validate exactly one containing schemas",
      "allOf": [{
        "$ref": "#/definitions/common"
      }, {
        "title": "oneOf",
        "type": "object",
        "properties": {
          "discriminator": { "$ref": "#/definitions/discriminator" },
          "oneOf": { "$ref": "#/definitions/of" }
        },
        "required": ["oneOf"]
      }]
    },
    "discriminator": {
      "description": "Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description",
      "title": "discriminator",
      "type": "object",
      "properties": {
        "propertyName": {
          "type": "string",
          "description": "The name of the property in the payload that will hold the discriminator value"
        },
        "mapping": {
          "type": "object",
          "description": "An object to hold mappings between payload values and schema names or references",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": ["propertyName"]
    },
    "positiveInteger": {
      "description": "Positive integer value",
      "type": "integer",
      "minimum": 0
    },
    "stringArray": {
      "description": "Array string values",
      "type": "array",
      "items": { "type": "string" },
      "minItems": 1
    },
    "of": {
      "description": "Combination values",
      "type": "array",
      "items": {
        "$ref": "#/definitions/objectOrReference"
      }
    },
    "objectOrReference": {
      "description": "Object or reference value",
      "oneOf": [{
        "$ref": "#/definitions/object"
      }, {
        "$ref": "#/definitions/reference"
      }]
    },
    "arrayItem": {
      "description": "Allowed values of an array item",
      "oneOf": [{
        "$ref": "#/definitions/object"
      }, {
        "$ref": "#/definitions/boolean"
      }, {
        "$ref": "#/definitions/number"
      }, {
        "$ref": "#/definitions/string"
      }, {
        "$ref": "#/definitions/reference"
      }]
    },
    "definition": {
      "description": "Represents a concrete type definition",
      "oneOf": [{
        "$ref": "#/definitions/object"
      }, {
        "$ref": "#/definitions/array"
      }, {
        "$ref": "#/definitions/boolean"
      }, {
        "$ref": "#/definitions/number"
      }, {
        "$ref": "#/definitions/string"
      }]
    },
    "combination": {
      "description": "Represents a combination of schemas",
      "oneOf": [{
        "$ref": "#/definitions/allOf"
      }, {
        "$ref": "#/definitions/anyOf"
      }, {
        "$ref": "#/definitions/oneOf"
      }]
    },
    "reference": {
      "description": "Represents a reference to another schema",
      "title": "reference",
      "type": "object",
      "properties": {
        "$ref": {
          "type": "string"
        }
      },
      "required": ["$ref"]
    }
  }
}
]]>
                </artwork>
            </figure>
        </section>
    </middle>
    <back>
        <!-- References Section -->
        <references title="Normative References">
            &RFC2119;
            &RFC3339;
            &RFC3986;
            &RFC6901;
            &RFC7159;
        </references>
        <references title="Informative References">
            &RFC7231;
            <reference anchor="json-schema-validation">
                <front>
                    <title>JSON Schema Validation: A Vocabulary for Structural Validation of JSON</title>
                    <author initials="A." surname="Wright">
                        <organization/>
                    </author>
                    <author initials="G." surname="Luff">
                        <organization/>
                    </author>
                    <date year="2016" month="October"/>
                </front>
                <seriesInfo name="Internet-Draft" value="draft-wright-json-schema-validation-00" />
            </reference>
        </references>
        <section title="Acknowledgments">
            <t>
                Thanks to the JSON Schema and OpenAPI team and contributors.
            </t>
        </section>
        <section title="ChangeLog">
            <t>
                <cref>This section to be removed before leaving Internet-Draft status.</cref>
            </t>
            <t>
                <list style="hanging">
                    <t hangText="draft-kappestein-json-schema-code-00">
                        <list style="symbols">
                            <t>Initial creation</t>
                        </list>
                    </t>
                </list>
            </t>
        </section>
    </back>
</rfc>
